/*==============================================*/
/* generate multiple files to be read later    */
/*using perl into octopule.                  */
/*==============================================*/
// complie gcc -O ICgen_StarsRL_uni.c ran1.c gasdev.c ran2.c -lm
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include <math.h>
#include "nrutil.h"
#define daytoyr (1./365.25)
#define Be (1./(0.33*0.33))
#define Rsun (695500*6.68459e-9)                                   /* sun radius au       */

int countMAX=30;

double rL(double q){
  // Eggleton 83 equation                                                                                                                                                       
  // q is mdonner/mreciver     
  /// This Roche may be funcky use the one from my code - done                                                                                                                                                 
  double num1=0.49,num2=0.6;
  return (num1*pow(q,2./3.)/(num2* pow(q,2./3.)+log(1+pow(q,1./3.))));
}


double Mar(double q,double eout,double imu){
  //Mardling & Aarseth 2001 stability
  //qout=m3/(m1+m2)
  double val;
  val=2.8*pow((1.+q),(2./5.))*pow(1.+eout,2./5.)*pow(1.-eout,-6./5.)*(1.-0.3*imu/180);
  //  printf("q=%le eout=%le imu=%le\n",q,eout,imu);
 return val;
}

double Naoz(double q, double ein, double eout){
  double val;
  val = pow(3*q,1./3.)*(1+ein)/(1-eout);
  return val;
}

int Num=7000; //this is the max number of steps taken in order to generate the files
double logPBAR=4.8;
double siglogP=2.3;
double q12mean=0.23;
double q12sig=0.42;
int Mmax=300;
int MoreN=1;//580;

main(){
  int i,j,counter=0,countm,o;
  FILE *out,*outF,*outTest;
  double m1,m2,m3,R1,R2,spin1,beta,spin2,a1,a2,e1,e2,g1,g2,inc,age,t_ev,t_rr;
  double cosi,LittleOmega;
  double mine2,maxe2,minm3,maxm3,mincosi,maxcosi;  
  double Marval,Naozval,Roche1,Roche2;
  double logP,logPval,P,P2,P1,PT1,PT2;
  double q12,qout;
  double alpha;
  double epsilon,a1GR,a1high;
  double k2=4*M_PI*M_PI;
  double c2=3.993953869e9;
  char pathname[500],name[500],failname[500];
  long idum=-10;
  /* flags:  0 yes 1 no  */
  int QUADRUPOLE=0,OCTUPOLE=0,GR=0,TF=0,ML1=0,MB1=0,ML2=0,MB2=0,SSE1=0,SSE2=0,SSE3=1,tMSMyr=0.0; 
  float ran1(long *);  
  float ran2(long *);  
  float gasdev(long *);  
  float alpha2, m1max, m1min, a2max, a2min, P2min, P2max;


  printf(" ====== Shalom, this code generate initial conditions files For Stars! ======\n");
  printf(" ====== The file names are triple.in##                      ======\n");

  alpha = 2.35;
  alpha2 = 0.4;
  m1min = 1.;
  m1max = 150.;
  a2min = 700.;
  a2max = 20650.;

  /******/
  /** set some parameters  **/
  //  m1=1.;//Msun
  //R1=1.;
  // m2=0.001; //for now, set it to be jpiter
  //R2=0.10012;// RJ
  spin1=10.;
  spin2=10.;
  /*
  g1=45.;
  g2=0.;
  */
  beta=0.;
  //a1=5.;//6.;
  //a2=500.; //randomize - see below
  //  e1=0.01; //start in situ of the disk
  
  //age=10000;//Myr
  /******/
  /** min max for the random varibels **/
  mine2=0.;
  maxe2=1.;
  mincosi=-1.;//cos(0.*M_PI/180.);
  maxcosi=1.;//cos(180.*M_PI/180.);
  mincosi=cos(0.*M_PI/180.);
  maxcosi=cos(180.*M_PI/180.);

sprintf(pathname,"/u/home/a/alexpste/IniCon/");
  i=1;
  j=1;
  o=1;
  i=MoreN;
  j=MoreN;
  Num=Num+MoreN;
  sprintf(failname,"%sfailedStarsuni.txt",pathname);
  outF=fopen(failname,"w");
  outTest=fopen("ICsStarsRL_uni.txt","w"); 

  //for (i=1;i<=Num;i++){
  printf(" generating ...\n");
  while (j<=Num){
    // sprintf(name,"%striple.in%3.3d",pathname,i);
    
    m1 = pow((pow(m1max,1-alpha)-pow(m1min,1-alpha))*ran2(&idum)+pow(m1min,1-alpha),1./(1-alpha)); // Salpeter dist. with alpha = 2.35

    // Choose paramters for the inner orbit:
    for (countm=0;countm<=Mmax;countm++){
      //q12=gasdev(&idum);
      // m2=m1*(q12*q12sig+q12mean);
      q12=pow((1.-pow(0.01,1.-alpha2))*ran2(&idum)+pow(0.01,1.-alpha2),1./(1.-alpha2));
      m2=m1*q12; // see Lu et al. 2013
      if (m2>=1. && m2 <= 150.) break;
      //if (m2 > 0) break;
      else if (m2<=0 && countm==Mmax){
	printf("oh no, you have tried %d times to find a posotive mass (m2) and faild\n");
	printf("Some thing is wrong...\n");
	printf("Terminating now\n");
	exit(5);
      }
    }
    
    R1=pow(m1,0.8);
    R2=pow(m2,0.8);


    //assuming uniform in log dis since we only start from tail of  Duquennoy & Mayor log-normal, so we approximate as const.
   
    logPval=gasdev(&idum);
    logP=logPval*siglogP+logPBAR; //this is the log of the period of the outer orbit as a result of normal dis with mean logP2BAR and sigma=siglogP2
    

    //PT1=exp(logP)*daytoyr;
    PT1=pow(10.,logP)*daytoyr;

    logPval=gasdev(&idum);
    logP=logPval*siglogP+logPBAR; //this is the log of the period of the outer orbit as a result of normal dis with mean logP2BAR and sigma=siglogP2
    // PT2=exp(logP)*daytoyr;
    PT2=pow(10.,logP)*daytoyr;

    /*
    P1=PT1;//DMIN(PT1,PT2);
    P2=PT2;//DMAX(PT1,PT2);
    */

    //P1=DMIN(PT1,PT2);
    //P2=DMAX(PT1,PT2);

    P1 = PT1;
    
    a1=pow(SQR(P1)*(m1+m2),1./3.); 
    
    // printf("P1=%le yr, P1=%le day, a1=%le\n",P1,P1*365.25,a1);
    /*
    if (P1*365.25>1000){

      e1=sqrt(ran2(&idum));//thermal
      // printf("thermal : e1=%le\n",e1);
    }
    else{//Rayleigh
      // e1=sqrt(-log(2.*Be*ran2(&idum))/Be);
      e1=sqrt(-log(ran2(&idum))/Be);
      //printf(" Rayleigh : 2.*Be*ran2(&idum))/Be=%le e1=%le\n",ran2(&idum),e1);
      //printf(" Be=%le\n",Be);
    }
    */
    e1=(maxe2-mine2)*ran2(&idum)+mine2; //uniform

    /* draw a random nuber for the relevent variables  */

    // see Payne et al 2011 (cof. procceding) why we choose a uniform dis. 
    cosi = (maxcosi-mincosi)*ran2(&idum)+mincosi ;//uniform
    inc = acos(cosi)*180/M_PI;


    // now for the outer orbit
   

    for(countm=0;countm<=Mmax;countm++){
      qout=gasdev(&idum);   
      //m3=(m1+m2)*(qout*q12sig+q12mean);
      m3=4.0e6;
      if (m3>0) break;
      else if (m3<=0 &&countm==Mmax){
        printf("oh no, you have tried %d times to find a posotive mass (m3)  and faild\n");
        printf("Some thing is wrong...\n");
        printf("Terminating now\n");
        exit(5);
      }
    }

    P2min = sqrt(pow(a2min,3.)/(m1+m2+m3));
    P2max = sqrt(pow(a2max,3.)/(m1+m2+m3));
    P2=pow(10,log10(P2min)+(log10(P2max)-log10(P2min))*ran2(&idum)); // uniform in log   

    a2=pow(SQR(P2)*(m1+m2+m3),1./3.); 
   
    //e2=(maxe2-mine2)*ran2(&idum)+mine2; //uniform 
    e2 = sqrt(ran2(&idum));//thermal

    //a1GR=pow(pow(a2,3.)*3*k2*m1*m2*sqrt(1-e2*e2)/(c2*m3),1./4.);

    //a1high=0.1*a2*(1-e2*e2)/e2;

    //a1high=a2/Naoz(m3/(m1+m2),e1,e2);

    //a1=(a1high-a1GR)*ran2(&idum)+a1GR;
    /*
    if (P2*365.25>1000){

      e2=sqrt(ran2(&idum));//thermal

    }
    else{
      e2=sqrt(-log(ran2(&idum))/Be);
      // e2=sqrt(-log(2.*Be*ran2(&idum))/Be);
    }
    */

    //e2=(maxe2-mine2)*ran2(&idum)+mine2; //uniform
   
    //g1, g2 uniform in [0,2pi]
    g1=360.*ran2(&idum);
    g2=360.*ran2(&idum);
    beta=360.*ran2(&idum);


    Marval=Mar(m3/(m1+m2),e2,inc);
    Naozval=Naoz(m3/(m1+m2),e1,e2);

    Roche1=rL(m1/m2);
    Roche2=rL(m2/m1);

    //age = 2.0*sqrt(k2*m3/a2)/(16.0*sqrt(M_PI)*log(10.0)*a1*1.4*pow(10.0,-7.0)*pow(a2/82500.0,-1.4))*1e-6;
   
    //evaporation time scale derived by Alexander from Binney and Tremaine
    t_ev=sqrt(3.0/M_PI)*(280.*0.211*sqrt(20650.0/a2)/(32*k2*a1*log(15.)*5.2e5*pow(a2/20650.0*0.5,-1.8)/pow(206500,3)))*(m1+m2);

    //resonant relaxation time scale from Smadar
    t_rr=2*M_PI*m3/(1.83*1.83*pow(a2*a2*a2/(k2*m3),-0.5)*sqrt((m1+m2)*0.5e5*pow(a2/(20650.0),1.8)));

    /*if (t_ev < t_rr){
        age = t_ev*1e-6;
    }
    else {
	age = t_rr*1e-6;
    }*/
    age = t_ev*1e-6;

    //  printf("Marval=%le e2=%le inc=%le a2/a1=%le\n",Marval,e2,inc,a2/a1);
    // Add this condtion epsilon= a1/a2 *e2/(1-e2^2)<0.1
    epsilon = (a1/a2) *e2/(1-e2*e2);
    if (a2/a1<Marval){
      o++;
    }
     if (a2/a1>Naozval  && R1*Rsun<a1*(1-e1)*Roche1 && R2*Rsun<a1*(1-e1)*Roche2 && epsilon<0.1){
    //if (a2/a1>Marval  ){
  fprintf(outTest,"%le %le %le %le  %le %le %le %le %le %le %le  %le %le %le\n",a1,a2,P1,P2,e1,e2,m1,m2,m3,R1,R2,g1,g2,inc);	
    
	 
      sprintf(name,"%striple.in%d",pathname,i);
      out=fopen(name,"w");
      
      fprintf(out,"#########################################################################\n");
      fprintf(out,"## Read in the initial orbital parameters of the triple system         ##\n");
      fprintf(out,"## Mass in M_sol, semimajor axis in AU                                 ##\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"\n");
      fprintf(out,"__m1_______m2___________m3________R1(Rsun)____R2(Rsun)____Spin1P(day)__Spin2P(day)__beta(s_O_deg)__a1______a2____e1____e2____g1(deg)__g2(deg)__i(deg)__age(Myr)___ :::\n");
      fprintf(out,"\n");
      
      
      fprintf(out,"%le  %le  %le  %le  %le %le  %le  %le  %le  %le %le  %le  %le  %le  %le %le\n",m1,m2,m3,R1,R2,spin1,spin2,beta,a1,a2,e1,e2,g1,g2,inc,age);
      fprintf(out,"\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"## Flags                                                               ##\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"\n");
      fprintf(out,"__QUADRUPOLE(0_yes_1_no)___ :::\n");
      fprintf(out,"%d\n",QUADRUPOLE);
      fprintf(out,"\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"__OCTUPOLE(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",OCTUPOLE);
      fprintf(out,"\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"__GR(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",GR);
      fprintf(out,"\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"__TF(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",TF);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__ML1(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",ML1);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__MB1(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",MB1);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__ML2(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",ML2);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__MB2(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",MB2);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__SSE1(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",SSE1);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__SSE2(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",SSE2);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__SSE3(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",SSE3);
      fprintf(out,"\n");
      fprintf(out,"########################################################################\n");
      fprintf(out,"__tMSMyr(0_yes_1_no)___ :::\n");
      fprintf(out,"\n");
      fprintf(out,"%d\n",tMSMyr);
      fprintf(out,"\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"## Control Parameters                                                  ##\n");
      fprintf(out,"#########################################################################\n");
      fprintf(out,"\n");
      fprintf(out,"__eps___ :::\n");
      fprintf(out,"1e-16\n");
      
      fclose(out);
      i++;
      }
      else {
	fprintf(outF,"a2/a1=%le Mar=%le %le  %le  %le  %le  %le %le  %le  %le  %le  %le %le  %le  %le  %le  %le %le\n",a2/a1,Marval,m1,m2,m3,R1,R2,spin1,spin2,beta,a1,a2,e1,e2,g1,g2,inc,age);
	counter++;
      }
    j++;
  }
 
  fprintf(outF,"out of %d  there where %d un-stabel ones\n",j-1,counter);
  fprintf(outF,"%d violated Mard. stability criterion\n",o-1);
  printf("   The end\n");

}
